generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id                 String    @id @default(uuid()) @db.Uuid
  email              String    @unique
  name               String?
  emailVerified      DateTime? @map("email_verified")
  image              String?
  roles              String[]  @default(["viewer"])
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  passkeyCredential  String?   @map("passkey_credential")
  oauthProvider      String?   @map("oauth_provider")
  oauthId            String?   @map("oauth_id")
  accounts           Account[]
  sessions           Session[]
 
  @@map("users")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Page {
  id        String   @id @default(uuid()) @db.Uuid
  url       String   @unique
  title     String?
  createdAt DateTime @default(now()) @map("created_at")
  events    Event[]

  @@map("pages")
}

model Event {
  id            String            @id @default(uuid()) @db.Uuid
  pageId        String            @map("page_id") @db.Uuid
  timestamp     DateTime          @default(now())
  eventType     String            @map("event_type")
  visitorHash   String            @map("visitor_hash")
  userAgent     String?           @map("user_agent")
  metadata      Json?
  consentGiven  Boolean           @default(false) @map("consent_given")
  page          Page              @relation(fields: [pageId], references: [id], onDelete: Cascade)
  embeddings    EventEmbedding[]

  @@index([timestamp(sort: Desc)])
  @@index([pageId])
  @@index([visitorHash])
  @@map("events")
}

model EventEmbedding {
  id          String                        @id @default(uuid()) @db.Uuid
  eventId     String                        @map("event_id") @db.Uuid
  embedding   Unsupported("vector(1536)")
  summaryText String                        @map("summary_text")
  createdAt   DateTime                      @default(now()) @map("created_at")
  event       Event                         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_embeddings")
}
